// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shards

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DispatcherClient is the client API for Dispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherClient interface {
	StartDispatch(ctx context.Context, opts ...grpc.CallOption) (Dispatcher_StartDispatchClient, error)
}

type dispatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherClient(cc grpc.ClientConnInterface) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) StartDispatch(ctx context.Context, opts ...grpc.CallOption) (Dispatcher_StartDispatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dispatcher_serviceDesc.Streams[0], "/shards.Dispatcher/StartDispatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dispatcherStartDispatchClient{stream}
	return x, nil
}

type Dispatcher_StartDispatchClient interface {
	Send(*StateRead) error
	Recv() (*StateRead, error)
	grpc.ClientStream
}

type dispatcherStartDispatchClient struct {
	grpc.ClientStream
}

func (x *dispatcherStartDispatchClient) Send(m *StateRead) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dispatcherStartDispatchClient) Recv() (*StateRead, error) {
	m := new(StateRead)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DispatcherServer is the server API for Dispatcher service.
// All implementations must embed UnimplementedDispatcherServer
// for forward compatibility
type DispatcherServer interface {
	StartDispatch(Dispatcher_StartDispatchServer) error
	mustEmbedUnimplementedDispatcherServer()
}

// UnimplementedDispatcherServer must be embedded to have forward compatible implementations.
type UnimplementedDispatcherServer struct {
}

func (UnimplementedDispatcherServer) StartDispatch(Dispatcher_StartDispatchServer) error {
	return status.Errorf(codes.Unimplemented, "method StartDispatch not implemented")
}
func (UnimplementedDispatcherServer) mustEmbedUnimplementedDispatcherServer() {}

// UnsafeDispatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherServer will
// result in compilation errors.
type UnsafeDispatcherServer interface {
	mustEmbedUnimplementedDispatcherServer()
}

func RegisterDispatcherServer(s grpc.ServiceRegistrar, srv DispatcherServer) {
	s.RegisterService(&_Dispatcher_serviceDesc, srv)
}

func _Dispatcher_StartDispatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DispatcherServer).StartDispatch(&dispatcherStartDispatchServer{stream})
}

type Dispatcher_StartDispatchServer interface {
	Send(*StateRead) error
	Recv() (*StateRead, error)
	grpc.ServerStream
}

type dispatcherStartDispatchServer struct {
	grpc.ServerStream
}

func (x *dispatcherStartDispatchServer) Send(m *StateRead) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dispatcherStartDispatchServer) Recv() (*StateRead, error) {
	m := new(StateRead)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Dispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shards.Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartDispatch",
			Handler:       _Dispatcher_StartDispatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "shards.proto",
}
